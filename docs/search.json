[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The pmtables Book",
    "section": "",
    "text": "This is a simple introduction to the pmtables package for R. I hope this will be useful for those who are new to the package and those who just need a reminder on the syntax.\npmtables turns R data frames into tables for inclusion in a TeX document. Since the current book is rendered to html format, we cannot naturally render the table outputs as we work examples. Instead, we process the output table code in a pdf snippet and include it into the html document as a png file. This is accomplished using a new function called st_as_image(). The only purpose for calling this function is to get the table to appear in the pages of this book. This function can be useful for previewing tables or having them appear in html documents but it should generally not be used if creating outputs for TeX reports. You will find this function in pmtables release 0.4.1 and later.\nThere is also a pdf version of this book available here.\nYou can find documentation for pmtables here.\n\nSource\nThe pmtables package is maintained here.\nThe code for this book is maintained here.\n\n\nBuild\n\npackageVersion(\"pmtables\")\n\n[1] '0.8.0'\n\ndate()\n\n[1] \"Wed Jun 26 08:00:18 2024\"",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "stable.html",
    "href": "stable.html",
    "title": "2  stable",
    "section": "",
    "text": "2.1 Syntax\nPass your data.frame into stable()\nstable(data)\nOther formal arguments include:\nYou can also pass a bunch of other arguments through ... to further format the table (see ?stable for details)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>stable</span>"
    ]
  },
  {
    "objectID": "stable.html#syntax",
    "href": "stable.html#syntax",
    "title": "2  stable",
    "section": "",
    "text": "align to set column alignment\npanel to create groups of rows under a “panel” header\nspan to group columns under a “spanner” header\nnotes to create table notes\nsumrows to insert summary rows\nunits that get placed below the corresponding column name\ndrop to omit certain columns from the table\nsizes to set different table size attributes\nescape_fun a function to sanitize table items",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>stable</span>"
    ]
  },
  {
    "objectID": "stable.html#basics",
    "href": "stable.html#basics",
    "title": "2  stable",
    "section": "2.2 Basics",
    "text": "2.2 Basics\nstable() is the name of the workhorse function that is used to turn data.frames into TeX tables. This chapter will introduce the stable() function and how to us it to create basic tables.\nTo illustrate usage and features of stable(), we will use the stdata data set that comes with pmtables\n\ndata &lt;- stdata()\n\nhead(data)\n\n. # A tibble: 6 × 9\n.   STUDY       DOSE   FORM    N     WT    CRCL  AGE   ALB   SCR  \n.   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n. 1 12-DEMO-001 100 mg tablet  80    71.4  104   33.7  4.20  1.06 \n. 2 12-DEMO-001 150 mg capsule 16    89.4  122   24.4  4.63  1.12 \n. 3 12-DEMO-001 150 mg tablet  48    81.7  104   34.4  3.83  0.910\n. 4 12-DEMO-001 150 mg troche  16    94.0  93.2  27.4  4.94  1.25 \n. 5 12-DEMO-001 200 mg tablet  64    67.9  100   27.5  4.25  1.10 \n. 6 12-DEMO-001 200 mg troche  16    76.6  99.2  22.8  4.54  1.15\n\n\nWe can turn this data frame into a TeX table by passing it into stable().\n\nout &lt;- stable(data)\n\nhead(out, n = 10)\n\n.  [1] \"\\\\setlength{\\\\tabcolsep}{5pt} \"                                            \n.  [2] \"\\\\begin{threeparttable}\"                                                   \n.  [3] \"\\\\renewcommand{\\\\arraystretch}{1.3}\"                                       \n.  [4] \"\\\\begin{tabular}[h]{lllllllll}\"                                            \n.  [5] \"\\\\hline\"                                                                   \n.  [6] \"STUDY & DOSE & FORM & N & WT & CRCL & AGE & ALB & SCR \\\\\\\\\"                \n.  [7] \"\\\\hline\"                                                                   \n.  [8] \"12-DEMO-001 & 100 mg & tablet & 80 & 71.4 & 104 & 33.7 & 4.20 & 1.06 \\\\\\\\\" \n.  [9] \"12-DEMO-001 & 150 mg & capsule & 16 & 89.4 & 122 & 24.4 & 4.63 & 1.12 \\\\\\\\\"\n. [10] \"12-DEMO-001 & 150 mg & tablet & 48 & 81.7 & 104 & 34.4 & 3.83 & 0.910 \\\\\\\\\"\n\n\nNote that we have shown the raw latex code that is generated by stable(). That is to say: the output from stable() is a character vector of latex code for the table. Note also that this character vector has a special class associated with it: stable. That means we can write functions that recognize this character vector as output from stable() and we can have those functions process the character vector in special ways.\nWe can render that table in TeX in the current Rmarkdown document by passing the text to st_asis().\n\nout %&gt;% st_as_image() \n\n\n\n\n\n\n\n\nRemember to only call st_asis() when you are rendering tables inline in an Rmd document. If you are sending table code to a TeX report, then you will save them to a file and then include them into your report.\nThe remaining sections of this chapter will show you how to modify and enhance this output in the more basic ways. We will implement separate chapters for more complicated table manipulations.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>stable</span>"
    ]
  },
  {
    "objectID": "stable.html#annotate-with-file-names",
    "href": "stable.html#annotate-with-file-names",
    "title": "2  stable",
    "section": "2.3 Annotate with file names",
    "text": "2.3 Annotate with file names\npmtables can track and annotate your table with the filenames of the R code that generated the table (r_file) as well as the output file where you write the the table .tex code (output_file).\nTo have pmtables annotate your table with these file names, pass them in with the r_file and output_file arguments\n\nout &lt;- stable(\n  data, \n  r_file = \"tables.R\", \n  output_file = \"tables.tex\"\n)\n\nWhen we look at the rendered table, these names will show up as annotations at the bottom of the table\n\nout %&gt;% st_as_image()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>stable</span>"
    ]
  },
  {
    "objectID": "stable.html#saving-your-stable",
    "href": "stable.html#saving-your-stable",
    "title": "2  stable",
    "section": "2.4 Saving your stable",
    "text": "2.4 Saving your stable\nSaving your stable can be as easy as sending it into writeLines()\n\nwriteLines(\n  out, \n  con = tempfile(tmpdir = '.', fileext = \".tex\")\n)\n\nBut remember that we passed in the output_file argument to stable() and we can use that data to save the table code to the file we named in that argument.\nNote that our stable object has another attribute now called stable_file\n\nattributes(out)\n\n. $class\n. [1] \"stable\"\n. \n. $stable_file\n. [1] \"tables.tex\"\n\n\nThis has the value that we passed in as output_file. To save our table to stable_file, we call stable_save()\n\nstable_save(out)\n\nThere is a dir argument to stable_save() that we can use to to select the directory where the file will be saved\n\nstable_save(out, dir = tempdir())\n\nAnd if you look at the default value for dir in ?stable_save, you’ll see that this is associated with an option called pmtables.dir; you can set that option to your default output directory and your tables will be saved there until you change that\n\noptions(pmtables.dir = tempdir())\n\nstable_save(out)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>stable</span>"
    ]
  },
  {
    "objectID": "stable.html#align-columns",
    "href": "stable.html#align-columns",
    "title": "2  stable",
    "section": "2.5 Align columns",
    "text": "2.5 Align columns\nUse the align argument to align column data to the left, center or right. Use a cols_* function to specify the default alignment for all columns\n\ntmp &lt;- tibble(AB = 1, CDEFGHIJ = 2, KL = 3)\n\nstable(tmp, align = cols_center()) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\nYou can pass in exceptions to the default\n\nstable(tmp, align = cols_center(CDEFGHIJ = \"r\")) %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\nOr you can pass an alignment directive and the columns that are bound by that directive\n\nstable(tmp, align = cols_center(.l = \"AB,KL\")) %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\nA special directive called .outer lets you specify the alignment of the first and last column in the table. For example, this code puts the first column to the left and the last column to the right.\n\nstable(tmp, align = cols_center(.outer = \"lr\")) %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\n\n2.5.1 Fixed column widths\nUse col_ragged(size) to force a column to be a fixed size.\n\nstable(tmp, align = cols_center(AB = col_ragged(2))) %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\nBy default, the unit is cm so that the first column (AB) has a width of 2 cm regardless of the contents.\nSee cols_align() help topic for more information and argument descriptions.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>stable</span>"
    ]
  },
  {
    "objectID": "stable.html#manipulating-columns-and-names",
    "href": "stable.html#manipulating-columns-and-names",
    "title": "2  stable",
    "section": "2.6 Manipulating columns and names",
    "text": "2.6 Manipulating columns and names\n\n2.6.1 Rename columns\nYou can change the name that appears in the rendered table with cols_rename\n\ndata %&gt;% \n  slice(1:3) %&gt;% \n  stable(cols_rename = c(Age = \"AGE\", Weight = \"WT\")) %&gt;%\n  st_as_image()\n\n\n\n\n\n\n\n\nNote that the rename syntax follows the tidyselect convention of putting the new name on the left and the old name on the right.\n\n\n2.6.2 Hide a column name\nYou can also “erase” the name of a column in the output\n\ndata %&gt;% \n  slice(1:3) %&gt;% \n  stable(cols_blank = \"WT,ALB,SCR\") %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\n\n\n2.6.3 Don’t print any table header information\n\ndata %&gt;% \n  slice(1:3) %&gt;% \n  stable(cols_omit = TRUE) %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\n\n\n2.6.4 Unmask column names\nIn tibbles, you can’t have duplicate column names. The cols_split argument lets you unmask the names when duplicate names are prefixed with a tag and a delimiter\n\ntmp &lt;- tibble(a.A = 1, b.A = 2, c.A = 3)\n\n\nstable(tmp, cols_split = '.') %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\n\n\n2.6.5 Make column names bold\n\ndata %&gt;% \n  slice(1:2) %&gt;% \n  stable(cols_bold = TRUE) %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\n\n\n2.6.6 Drop a column from the table\nIf we want to prevent a column from appearing in the output table (e.g.  FORM)\n\nhead(data)\n\n. # A tibble: 6 × 9\n.   STUDY       DOSE   FORM    N     WT    CRCL  AGE   ALB   SCR  \n.   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n. 1 12-DEMO-001 100 mg tablet  80    71.4  104   33.7  4.20  1.06 \n. 2 12-DEMO-001 150 mg capsule 16    89.4  122   24.4  4.63  1.12 \n. 3 12-DEMO-001 150 mg tablet  48    81.7  104   34.4  3.83  0.910\n. 4 12-DEMO-001 150 mg troche  16    94.0  93.2  27.4  4.94  1.25 \n. 5 12-DEMO-001 200 mg tablet  64    67.9  100   27.5  4.25  1.10 \n. 6 12-DEMO-001 200 mg troche  16    76.6  99.2  22.8  4.54  1.15\n\n\nlist the column name as drop\n\nstable(data, drop = \"FORM\") %&gt;% st_as_image()\n\n\n\n\n\n\n\n\nOf course some tidyverse could accomplish the same thing\n\ndata %&gt;% select(-FORM) %&gt;% stable()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>stable</span>"
    ]
  },
  {
    "objectID": "stable.html#other-customizations",
    "href": "stable.html#other-customizations",
    "title": "2  stable",
    "section": "2.7 Other customizations",
    "text": "2.7 Other customizations\n\n2.7.1 Notes\nArbitrary notes can get added to any table using the notes argument.\n\ndata %&gt;% \n  slice(1:3) %&gt;% \n  stable(notes = \"Showing just the first three rows\") %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\nThe appearance of the notes can be controlled by calling noteconf() and passing the result as note_config. See ?tab_notes() for more details.\n\n\n2.7.2 Units\npmtables can automatically place units underneath the appropriate column. To do this, generate a list with names that match the column names you want to label with units.\n\nu &lt;- list(\n  WT = \"kg\", CRCL = \"ml/min\", AGE = \"year\", ALB = \"g/dL\", \n  SCR = \"mg\\\\%\"\n) %&gt;% map(~paste0(\"(\", .x, \")\"))\n\nThen pass that list as units to stable()\n\nstable(data, units = u) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n2.7.3 Multi-line column headers\nIf the column header is long, you can break it across multiple lines. By default, use ... in the column name\n\ntibble(`First line ... Second line` = 123456789) %&gt;% \n  stable() %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\nThe break can be introduced through the rename mechanism\n\ntibble(a = 1) %&gt;% \n  stable(cols_rename =  c(`First ... Second` = \"a\")) %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\nLook at the ?tab_cols help topic for the cols_break argument; this lets you change the character sequence used for the break.\n\n\n2.7.4 Insert horizontal lines\nPass hlines_at to insert horizontal lines above specific rows. This can be either logical vector with the same length as the number of rows in the table or a vector of integers.\n\nstable(stdata(), hline_at = c(3,5)) %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\nor\n\nstable(stdata(), hline_at = data$FORM == \"tablet\") %&gt;% st_as_image()\n\n\n\n\n\n\n\n\nPass hlines_from to derive hline locations based on non-repeating values in a table column. Notice how this behaves.\n\nstable(stdata(), hline_from = \"DOSE\") %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\nSee the ?tab_hlines help topic for more info. See also st_hline() for the pipe equivalent with additional feature.\n\n\n2.7.5 Clear replicate values\nYou can create groups in a table by “clearing” replicate values\n\nstable(stdata(), clear_reps = \"STUDY\") %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\nThis can be combined with an hline\n\nstable(\n  stdata(), \n  clear_reps = \"STUDY\", \n  hline_from = \"STUDY\"\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\nSee ?tab_clear_reps for other options, including an option for clearing based on several grouping variables.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>stable</span>"
    ]
  },
  {
    "objectID": "panel.html",
    "href": "panel.html",
    "title": "3  Panel",
    "section": "",
    "text": "3.1 Syntax\nTo panel a table by STUDY\nstable(stdata(), panel = \"STUDY\")\nTo set a prefix for the panel header:\nstable(\n  stdata(), \n  panel = as.panel(\"STUDY\", prefix = \"Study: \")\n)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Panel</span>"
    ]
  },
  {
    "objectID": "panel.html#basics",
    "href": "panel.html#basics",
    "title": "3  Panel",
    "section": "3.2 Basics",
    "text": "3.2 Basics\nPaneling your table is a way to group sets of rows together into a “panel” with a panel header rendered in bold font. For example, we can panel a table of mtcars by carb. We will be working with an abbreviated version of mtcars\n\nsmcars\n\n.                          name  mpg cyl  disp  hp drat    wt  qsec vs am gear\n. Datsun 710         Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4\n. Hornet 4 Drive Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3\n. Valiant               Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3\n. Fiat 128             Fiat 128 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4\n. Toyota Corolla Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4\n. Toyota Corona   Toyota Corona 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3\n. Fiat X1-9           Fiat X1-9 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4\n. Merc 240D           Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4\n. Merc 230             Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4\n. Honda Civic       Honda Civic 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4\n.                carb\n. Datsun 710        1\n. Hornet 4 Drive    1\n. Valiant           1\n. Fiat 128          1\n. Toyota Corolla    1\n. Toyota Corona     1\n. Fiat X1-9         1\n. Merc 240D         2\n. Merc 230          2\n. Honda Civic       2\n\n\nThen we pass into stable() and name the paneling column\n\nstable(smcars, panel = \"carb\") %&gt;% st_as_image()\n\n\n\n\n\n\n\n\nNow, all of the carb==1 rows are grouped with the heading 1 and similarly the carb==2 rows are grouped with the heading 2 in bold.\nThis is ok, but a more informative heading would be helpful. To do this, we’ll call as.panel() to both name the panel column and set some options\n\nstable(\n  smcars, \n  panel = as.panel(\"carb\", prefix = \"carb: \")\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\nNote that the prefix is completely specified by the user (including any spaces or a colon.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Panel</span>"
    ]
  },
  {
    "objectID": "panel.html#panel-additional-customization",
    "href": "panel.html#panel-additional-customization",
    "title": "3  Panel",
    "section": "3.3 panel: additional customization",
    "text": "3.3 panel: additional customization\nSee the ?rowpanel help topic for arguments to rowpanel() that can be passed to customize the panel. Some of the customizations include\n\nadd a prefix to the panel title\nskip making panels for certain data in the panel column\nmake the panel title bold\nmake the panel title italics\nopt out from drawing hline above panels\njut the panel titles so that the rows under the panel header are indented (available starting with version 0.4.1)\n\n\n3.3.1 jut\nWe recommend an value more than 1, otherwise the table looks mis-aligned rather than creating offset between panel row and underlying data.\n\nstable(\n  stdata(), \n  panel = as.panel(\"STUDY\", jut = 1)\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\nThis feature requires pmtables 0.4.1 or greater.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Panel</span>"
    ]
  },
  {
    "objectID": "panel.html#panel-important-points",
    "href": "panel.html#panel-important-points",
    "title": "3  Panel",
    "section": "3.4 panel: important points",
    "text": "3.4 panel: important points\n\nMost of the time, the data frame should be sorted by the panel column\npmtables creates panels by non-repeating values in the panel column; there will be an error if duplicate panel names are found and this can be overridden by passing duplicates_ok to as.panel().",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Panel</span>"
    ]
  },
  {
    "objectID": "spanners.html",
    "href": "spanners.html",
    "title": "4  Spanners",
    "section": "",
    "text": "4.1 Syntax\nSet the span argument to the output of as.span(). The key arguments for as.span() are the spanner title and the names of the columns over which you want the spanner to run\nstable(\n  stdata(), \n  span = as.span(\"Covariates\", WT:SCR)\n)\nThe equivalent pipe syntax is\nst_new(stdata()) %&gt;% \n  st_span(\"Covariates\", WT:SCR)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Spanners</span>"
    ]
  },
  {
    "objectID": "spanners.html#basics",
    "href": "spanners.html#basics",
    "title": "4  Spanners",
    "section": "4.2 Basics",
    "text": "4.2 Basics\nA column spanner puts a horizontal line over a sequence of column names and places a title above that line forming a column group.\nAs a trivial example:\n\ndata &lt;- \n  tibble(\n    Tariffville = \"06081\",  \n    Connecticut= \"CT\", \n    Minnesota = \"MN\", \n    Minneapolis = \"55455\"\n  ) \n\nstable(\n  data, \n  span = as.span(\"States\", Connecticut:Minnesota)\n) %&gt;%  st_as_image()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Spanners</span>"
    ]
  },
  {
    "objectID": "spanners.html#multiple-spanners",
    "href": "spanners.html#multiple-spanners",
    "title": "4  Spanners",
    "section": "4.3 Multiple spanners",
    "text": "4.3 Multiple spanners\nMultiple spanners can be added to a table by specifying the level for any spanner that you want to be placed above the lowest level spanner. For example,\n\nsp &lt;- list(\n  as.span(\"States\", Connecticut:Minnesota), \n  as.span(\"Important Locations\", Tariffville:Minneapolis, level = 2)\n)\n\nstable(data, span = sp) %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\nNote that to specify multiple spanners, we pass a list of span objects. I’ve simplified the code a bit here by creating that list as a standalone object and then passing the whole list as span.\n\n4.3.1 Using pipe syntax\nFor problems like this, it might be preferable to use the pipe syntax\n\ndata %&gt;%\n  st_new() %&gt;% \n  st_span(\"States\", Connecticut:Minnesota) %&gt;% \n  st_span(\"Important Locations\", Tariffville:Minneapolis, level = 2) %&gt;% \n  stable() %&gt;% \n  st_as_image()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Spanners</span>"
    ]
  },
  {
    "objectID": "spanners.html#breaking-span-title",
    "href": "spanners.html#breaking-span-title",
    "title": "4  Spanners",
    "section": "4.4 Breaking span title",
    "text": "4.4 Breaking span title\nWe can make the title of the span break across multiple lines by using ...\n\nstable(\n  data, \n  span = as.span(\"Important ... States\", Connecticut:Minnesota)) %&gt;%\n  st_as_image()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Spanners</span>"
    ]
  },
  {
    "objectID": "spanners.html#aligning-span-title",
    "href": "spanners.html#aligning-span-title",
    "title": "4  Spanners",
    "section": "4.5 Aligning span title",
    "text": "4.5 Aligning span title\nBeginning with version 0.4.1, the span title can be left or right justified in addition to the default centering\n\nstable(\n  stdata(), \n  span = as.span(\"Covariates\", WT:SCR, align = 'l')\n) %&gt;% st_as_image()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Spanners</span>"
    ]
  },
  {
    "objectID": "spanners.html#span-created-by-splitting-column-names",
    "href": "spanners.html#span-created-by-splitting-column-names",
    "title": "4  Spanners",
    "section": "4.6 Span created by splitting column names",
    "text": "4.6 Span created by splitting column names\ncolsplit() is a way to create column spanners which are encoded into the column names of the input data frame; the names are split on a separator character (like .) and either the left or right side are taken as the title and the other is taken as the column name.\nConsider this data\n\n\n  A.first A.second B.third B.fourth\n1       1        2       3        4\n\n\nNotice the natural grouping between A.first and A.second; we want first and second grouped together with the title A. Similar setup for third and fourth under the title B.\nWe can make table with spanners by passing a call to colsplit() as span_split\n\nstable(dd, span_split = colsplit(sep = '.')) %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\n\n4.6.1 pivot_longer workflow\nThis is pattern is convenient when summarizing data in a long format. To to demonstrate, we’ll calculate summary statistics for WT and AGE by STUDY\n\nsumm &lt;- \n  pmt_first %&gt;%\n  pivot_longer(cols = c(\"WT\", \"AGE\")) %&gt;% \n  filter(!is.na(value)) %&gt;%\n  group_by(STUDYf, name) %&gt;% \n  summarise(Mean = mean(value), Sd = sd(value), N = n(), .groups = \"drop\") %&gt;%\n  mutate(across(Mean:N, sig)) %&gt;% \n  mutate(across(Mean:N, as.character))\n\nsumm\n\n# A tibble: 8 × 5\n  STUDYf      name  Mean  Sd    N    \n  &lt;fct&gt;       &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n1 12-DEMO-001 AGE   32.0  9.19  30   \n2 12-DEMO-001 WT    72.2  14.3  29   \n3 12-DEMO-002 AGE   35.0  8.20  50   \n4 12-DEMO-002 WT    72.4  11.5  49   \n5 11-DEMO-005 AGE   32.8  8.48  40   \n6 11-DEMO-005 WT    68.9  14.5  39   \n7 13-DEMO-001 AGE   34.2  9.67  40   \n8 13-DEMO-001 WT    69.4  11.6  40   \n\n\nNow take 2 (or 3) more steps to get the table in the right shape to feed into stable(). First, pivot this longer using the summary stat name\n\nlong &lt;- pivot_longer(summ, cols = c(\"Mean\", \"Sd\", \"N\"), names_to = \"stat\")\nhead(long)\n\n# A tibble: 6 × 4\n  STUDYf      name  stat  value\n  &lt;fct&gt;       &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n1 12-DEMO-001 AGE   Mean  32.0 \n2 12-DEMO-001 AGE   Sd    9.19 \n3 12-DEMO-001 AGE   N     30   \n4 12-DEMO-001 WT    Mean  72.2 \n5 12-DEMO-001 WT    Sd    14.3 \n6 12-DEMO-001 WT    N     29   \n\n\nSecond, we’ll make name more appealing / informative\n\nlong &lt;- mutate(\n  long, \n  name = recode(name, WT = \"Weight (kg)\", AGE = \"Age (years)\")\n)\n\nThird, pivot this wider using the covariate name and stat\n\nwide &lt;- pivot_wider(\n  long, \n  names_from = c(\"name\", \"stat\"), \n  names_sep = \"---\"\n)\nwide\n\n# A tibble: 4 × 7\n  STUDYf      `Age (years)---Mean` Age (years)…¹ Age (…² Weigh…³ Weigh…⁴ Weigh…⁵\n  &lt;fct&gt;       &lt;chr&gt;                &lt;chr&gt;         &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  \n1 12-DEMO-001 32.0                 9.19          30      72.2    14.3    29     \n2 12-DEMO-002 35.0                 8.20          50      72.4    11.5    49     \n3 11-DEMO-005 32.8                 8.48          40      68.9    14.5    39     \n4 13-DEMO-001 34.2                 9.67          40      69.4    11.6    40     \n# … with abbreviated variable names ¹​`Age (years)---Sd`, ²​`Age (years)---N`,\n#   ³​`Weight (kg)---Mean`, ⁴​`Weight (kg)---Sd`, ⁵​`Weight (kg)---N`\n\n\nNow we have column names set up to create the spanners\n\nstable(wide, span_split = colsplit(sep = \"---\")) %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\nThis workflow takes several steps to complete, but once you identify the pattern it can be just an extra step or two beyond what you’re already doing to get a nice table.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Spanners</span>"
    ]
  },
  {
    "objectID": "longtable.html",
    "href": "longtable.html",
    "title": "5  Longtable",
    "section": "",
    "text": "5.1 Syntax\nTo create a long table from a data frame\nstable_long(stdata())\nTo create a long table from pipeline\nst_new(data) %&gt;% \n  stable_long()\nTo create a long table from pmtable\npt_cont_long(data, cols = \"WT,EGFR\") %&gt;% \n  stable_long()",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Longtable</span>"
    ]
  },
  {
    "objectID": "longtable.html#basics",
    "href": "longtable.html#basics",
    "title": "5  Longtable",
    "section": "5.2 Basics",
    "text": "5.2 Basics\nYou can create longtables that span multiple pages of your pdf document. Tables using thelongtable environment are very different than the the basic table from stable() which are built using tabular environment.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Longtable</span>"
    ]
  },
  {
    "objectID": "longtable.html#inserting-longtable-into-your-latex-document",
    "href": "longtable.html#inserting-longtable-into-your-latex-document",
    "title": "5  Longtable",
    "section": "5.3 Inserting longtable into your latex document",
    "text": "5.3 Inserting longtable into your latex document\nOnce you have written your long table out to a file, you can source it into your latex document with a simple input command\n\n\\input{my-table.tex}\n\nIMPORTANT\n\nDo not wrap the input in \\begin{table} / \\end{table}; the table will not show up properly that way\nDo not include any \\caption{...} statement; the caption must be provided in a special way (see below)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Longtable</span>"
    ]
  },
  {
    "objectID": "longtable.html#writing-a-caption",
    "href": "longtable.html#writing-a-caption",
    "title": "5  Longtable",
    "section": "5.4 Writing a caption",
    "text": "5.4 Writing a caption\nLongtable is different than regular tabular table in that the caption (and label) need to be included in the longtable environment. This means that you have to enter this information when you create the table.\n\n5.4.1 Method 1: in the R script\nstable_long() has an argument called lt_cap_text that will allow you to provide the text for the caption. This text must be passed to the stable_long() call (or st_make())\n\nout &lt;- stable_long(\n  data, \n  lt_cap_text = \"A long table (example 3)\"\n)\n\nYou will see in the TeX code that a caption is included in the longtable environment.\n\n\n5.4.2 Method 2: as a TeX macro\nRather than passing the text for the caption, you can name a macro that should (will) be defined at the time the table is rendered in the TeX document.\nUse the lt_cap_macro argument:\n\nout &lt;- stable_long(\n  data, \n  lt_cap_macro = \"ltexfourcap\"\n)\n\nNow, there is a call to that macro in the table and you must define that macro prior to sourcing in your tex document.\n\n\\newcommand{\\ltexfourcap}{\n  Another long table - example 4  \n}\n\n\\input{example4.tex}",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Longtable</span>"
    ]
  },
  {
    "objectID": "longtable.html#add-a-label",
    "href": "longtable.html#add-a-label",
    "title": "5  Longtable",
    "section": "5.5 Add a label",
    "text": "5.5 Add a label\nTo add a label, pass in a caption (either as text or as a macro) and then use the lt_cap_label argument:\n\ndata %&gt;% \n  stable_long(\n    lt_cap_label = \"tab:example\", \n    lt_cap_macro = \"example\"\n  )",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Longtable</span>"
    ]
  },
  {
    "objectID": "longtable.html#include-a-longtable-in-an-rmd-document",
    "href": "longtable.html#include-a-longtable-in-an-rmd-document",
    "title": "5  Longtable",
    "section": "5.6 Include a longtable in an Rmd document",
    "text": "5.6 Include a longtable in an Rmd document\nIf you want to dump a table into an R markdown document, pass it to st_asis(). There is a method for stable_long() and it will wrap the table properly.\n\nout &lt;- \n  data %&gt;%\n  stable_long() %&gt;% \n  st_as_image()",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Longtable</span>"
    ]
  },
  {
    "objectID": "longtable.html#page-breaks",
    "href": "longtable.html#page-breaks",
    "title": "5  Longtable",
    "section": "5.7 Page breaks",
    "text": "5.7 Page breaks\nStarting with version 0.4.1, pmtables will modify longtables so that panel headers are kept on the same page as the first row of data underneath the panel row.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Longtable</span>"
    ]
  },
  {
    "objectID": "pipe.html",
    "href": "pipe.html",
    "title": "6  Pipe interface",
    "section": "",
    "text": "6.1 Basics\nMostly working with this data; but some others come in later to illustrate certain features.\ndata &lt;- pmt_summarized\nhead(data)\n\n# A tibble: 6 × 9\n  STUDY       DOSE   FORM    N     WT    CRCL  AGE   ALB   SCR  \n  &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n1 12-DEMO-001 100 mg tablet  80    71.4  104   33.7  4.20  1.06 \n2 12-DEMO-001 150 mg capsule 16    89.4  122   24.4  4.63  1.12 \n3 12-DEMO-001 150 mg tablet  48    81.7  104   34.4  3.83  0.910\n4 12-DEMO-001 150 mg troche  16    94.0  93.2  27.4  4.94  1.25 \n5 12-DEMO-001 200 mg tablet  64    67.9  100   27.5  4.25  1.10 \n6 12-DEMO-001 200 mg troche  16    76.6  99.2  22.8  4.54  1.15\nYou start out a pipeline by passing your data frame into st_new()\ndata %&gt;% st_new() %&gt;% class\n\n[1] \"stobject\"    \"environment\"\nThis creates an object that gets revised by subsequent steps in the pipeline, adding features and styling as you go.\nFor the final step in the pipeline, we’ll send the object to stable() to create the table\ndata %&gt;% \n  st_new() %&gt;% \n  stable() %&gt;% \n  head(n=9)\n\n[1] \"\\\\setlength{\\\\tabcolsep}{5pt} \"                                            \n[2] \"\\\\begin{threeparttable}\"                                                   \n[3] \"\\\\renewcommand{\\\\arraystretch}{1.3}\"                                       \n[4] \"\\\\begin{tabular}[h]{lllllllll}\"                                            \n[5] \"\\\\hline\"                                                                   \n[6] \"STUDY & DOSE & FORM & N & WT & CRCL & AGE & ALB & SCR \\\\\\\\\"                \n[7] \"\\\\hline\"                                                                   \n[8] \"12-DEMO-001 & 100 mg & tablet & 80 & 71.4 & 104 & 33.7 & 4.20 & 1.06 \\\\\\\\\" \n[9] \"12-DEMO-001 & 150 mg & capsule & 16 & 89.4 & 122 & 24.4 & 4.63 & 1.12 \\\\\\\\\"",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#simple-table",
    "href": "pipe.html#simple-table",
    "title": "6  Pipe interface",
    "section": "6.2 Simple table",
    "text": "6.2 Simple table\nYou can terminate the pipeline and create a tabular table by sending to stable()\n\ndata %&gt;% \n  st_new() %&gt;% \n  stable()\n\nEquivalent call\n\ndata %&gt;% stable()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#long-table",
    "href": "pipe.html#long-table",
    "title": "6  Pipe interface",
    "section": "6.3 Long table",
    "text": "6.3 Long table\nYou can also pipe to stable_long() to make a long table\n\ndata %&gt;% \n  st_new() %&gt;% \n  stable_long()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#annotate-with-file-names",
    "href": "pipe.html#annotate-with-file-names",
    "title": "6  Pipe interface",
    "section": "6.4 Annotate with file names",
    "text": "6.4 Annotate with file names\n\nst_new(data) %&gt;% st_files(r = \"foo.R\", output = \"foo.tex\")\n\nEquivalent call\n\nstable(\n  data, \n  r_file = \"foo.R\", \n  output_file = \"foo.tex\"\n)\n\nNote that in the pipe version, we already have file in the function name so that gets dropped from the argument name.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#save-a-table",
    "href": "pipe.html#save-a-table",
    "title": "6  Pipe interface",
    "section": "6.5 Save a table",
    "text": "6.5 Save a table\nFirst convert with stable() or stable_long() then save with stable_save()\n\nst_new(data) %&gt;% \n  st_files(output = \"foo.tex\") %&gt;%\n  stable() %&gt;% \n  stable_save()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#align-columns",
    "href": "pipe.html#align-columns",
    "title": "6  Pipe interface",
    "section": "6.6 Align columns",
    "text": "6.6 Align columns\n\nst_center(...)\nst_left(...)\nst_right(...)\nst_align(...)\n\n\nst_new(data) %&gt;% \n  st_center() %&gt;% \n  stable() \n\nEquivalent call\n\nstable(data, align = cols_center())",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#fix-a-column-width",
    "href": "pipe.html#fix-a-column-width",
    "title": "6  Pipe interface",
    "section": "6.7 Fix a column width",
    "text": "6.7 Fix a column width\nThis is an aspect of aligning columns and uses col_ragged() most of the time. For example, if we want columns left-justified but the Title column is to be capped at 5 cm\n\nst_new(data) %&gt;% \n  st_left(Title = col_ragged(5)) %&gt;%\n  stable()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#rename-columns",
    "href": "pipe.html#rename-columns",
    "title": "6  Pipe interface",
    "section": "6.8 Rename columns",
    "text": "6.8 Rename columns\n\nst_new(data) %&gt;% \n  st_rename(Weight = \"WT\") %&gt;% \n  stable()\n\nEquivalent call\n\nstable(data, cols_rename = c(Weight = \"WT\"))",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#blank-columns",
    "href": "pipe.html#blank-columns",
    "title": "6  Pipe interface",
    "section": "6.9 Blank columns",
    "text": "6.9 Blank columns\n\nst_new(data) %&gt;% \n  st_blank(WT, ALB, DOSE) %&gt;% \n  stable()\n\nEquivalent call\n\nstable(data, cols_blank = \"WT,ALB,DOSE\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#drop-columns",
    "href": "pipe.html#drop-columns",
    "title": "6  Pipe interface",
    "section": "6.10 Drop columns",
    "text": "6.10 Drop columns\n\nst_new(data) %&gt;% \n  st_drop(WT, ALB, DOSE) %&gt;% \n  stable()\n\nEquivalent call\n\nstable(data, drop = \"WT, ALB, DOSE\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#notes",
    "href": "pipe.html#notes",
    "title": "6  Pipe interface",
    "section": "6.11 Notes",
    "text": "6.11 Notes\n\nMultiple calls are allowed; notes will accumulate\n\n\nst_new(data) %&gt;% \n  st_notes(\"first note\") %&gt;% \n  st_notes(\"second note\") %&gt;% \n  stable()\n\nEquivalent call\n\nstable(\n  data, \n  notes = c(\"first note\", \"second note\")\n)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#units",
    "href": "pipe.html#units",
    "title": "6  Pipe interface",
    "section": "6.12 Units",
    "text": "6.12 Units\n\nst_new(data) %&gt;% \n  st_units(WT = \"kg\", AGE = \"years\") %&gt;% \n  stable()\n\nNote that st_units() will automatically add parens to your units; this can be suppressed with the parens argument.\nUnits can also be added as a list\n\nu &lt;- list(WT = \"kg\", AGE = \"years\")\n\nst_new(data) %&gt;% \n  st_units(u) %&gt;% \n  stable()\n\nEquivalent call\n\nstable(data, units = u)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#panel",
    "href": "pipe.html#panel",
    "title": "6  Pipe interface",
    "section": "6.13 panel",
    "text": "6.13 panel\n\nst_new(data) %&gt;% \n  st_panel(\"STUDY\") %&gt;% \n  stable()\n\nEquivalent call\n\nstable(data, panel = \"STUDY\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#span",
    "href": "pipe.html#span",
    "title": "6  Pipe interface",
    "section": "6.14 span",
    "text": "6.14 span\n\nst_new(data) %&gt;% \n  st_span(\"Covariates\", c(WT, ALB, EGFR)) %&gt;% \n  stable()\n\nEquivalent call\n\nstable(\n  data, \n  span = as.span(\"Covariates\", c(WT, ALB, EGFR))\n)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#hlines---at",
    "href": "pipe.html#hlines---at",
    "title": "6  Pipe interface",
    "section": "6.15 hlines - at",
    "text": "6.15 hlines - at\nTo put horizontal lines at specific rows\n\nst_new(data) %&gt;% \n  st_hline(at = c(2,4,6))\n\nEquivalent call\n\nstable(data, hline_at = c(2,4,6))",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#hlines---from",
    "href": "pipe.html#hlines---from",
    "title": "6  Pipe interface",
    "section": "6.16 hlines - from",
    "text": "6.16 hlines - from\nTo calculate hlines based on data frame column values (for example, to break the table by changing values of STUDYf)\n\nst_new(data) %&gt;% \n  st_hline(from = \"STUDYf\")\n\nEquivalent call\n\nstable(data, hline_from = \"STUDYf\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#hlines---pattern",
    "href": "pipe.html#hlines---pattern",
    "title": "6  Pipe interface",
    "section": "6.17 hlines - pattern",
    "text": "6.17 hlines - pattern\nTo search the table for a pattern and add hlines above matches\n\nst_new(data) %&gt;% \n  st_hline(pattern  = \"All\", cols = \"Summary\")\n\nThe cols argument limits the search to the Summary column; omit this argument to search the whole table.\nThere is no equivalent call for this using straight stable().",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "pipe.html#clear-replicate-values",
    "href": "pipe.html#clear-replicate-values",
    "title": "6  Pipe interface",
    "section": "6.18 Clear replicate values",
    "text": "6.18 Clear replicate values\nTo create groups by “clearing” replicate values in a column\n\nst_new(data) %&gt;% \n  st_clear_reps(STUDY) %&gt;% \n  stable()\n\nEquivalent call\n\nstable(data, clear_reps = \"STUDY\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pipe interface</span>"
    ]
  },
  {
    "objectID": "preview.html",
    "href": "preview.html",
    "title": "7  Preview",
    "section": "",
    "text": "7.1 st2report\nTake a table or a list of tables and render them in a report-like document with a table of contents and a (faux) caption for each table\ndata %&gt;% stable() %&gt;% st2report()\nYou might try passing ntex to force the document to build more than once (sometimes the layout settles down after the second build\ndata %&gt;% stable() %&gt;% st2report(ntex = 2)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Preview</span>"
    ]
  },
  {
    "objectID": "preview.html#multiple-tables",
    "href": "preview.html#multiple-tables",
    "title": "7  Preview",
    "section": "7.2 Multiple tables",
    "text": "7.2 Multiple tables\nPass in a list of tables and you will get one table on each page with a listing of tables in the table of contents\n\nlist(table1, table2, table3) %&gt;% st2report()\n\nWhen you pass a named list, those names will propagate into the preview table of contents. For example\n\ntab &lt;- stable(stdata())\n\ntablist &lt;- list(\"first table\" = tab, \"second table\" = tab)\n\ntablist %&gt;% st2report(ntex = 2)\n\nYou will most likely need to run pdflatex x2 to get the table of contents right.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Preview</span>"
    ]
  },
  {
    "objectID": "preview.html#landscape",
    "href": "preview.html#landscape",
    "title": "7  Preview",
    "section": "7.3 Landscape",
    "text": "7.3 Landscape\nPass the stable() output through as_lscape() to have the preview page render in landscape orientation\n\nstdata() %&gt;% stable() %&gt;% as_lscape() %&gt;% st2report(ntex = 2)\n\nNote that this landscaping only operates in the preview; if you want your table to render in landscape mode in a standalone report, you will have to code that in the report document.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Preview</span>"
    ]
  },
  {
    "objectID": "preview.html#preview-other",
    "href": "preview.html#preview-other",
    "title": "7  Preview",
    "section": "7.4 Preview other",
    "text": "7.4 Preview other\n\n7.4.1 st2viewer\nThis function relies on texPreview() to render your table and display it as a graphic in the viewer window\n\ndata %&gt;% stable() %&gt;% st2viewer()\n\nThis method is more convenient because the tables always go to the viewer. But the rendering will not be like what you will see in the report.\n\n\n7.4.2 st2article\nLike st2report() but less report-like. You should use st2report() instead.\n\ndata %&gt;% stable() %&gt;% st2article()\n\n\n\n7.4.3 st2doc\nThe original. Rather than building a TeX article, it runs the table in a Rmd document via pandoc. Not recommended; it is much slower to get the preview because there has to be a call to pandoc\n\ndata %&gt;% stable() %&gt;% st2doc()",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Preview</span>"
    ]
  },
  {
    "objectID": "sanitize.html",
    "href": "sanitize.html",
    "title": "8  Sanitize",
    "section": "",
    "text": "8.1 Notes\nx &lt;- ptdata() %&gt;% \n  st_new(notes = \"EDA_summary = TRUE\") %&gt;% \n  st_make(inspect = TRUE) %&gt;% \n  get_stable_data() \n\nx$notes\n\n[1] \"EDA\\\\_summary = TRUE\"",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Sanitize</span>"
    ]
  },
  {
    "objectID": "sanitize.html#file-names",
    "href": "sanitize.html#file-names",
    "title": "8  Sanitize",
    "section": "8.2 File names",
    "text": "8.2 File names\n\nx &lt;- ptdata() %&gt;% st_new() %&gt;% \n  st_files(r = \"my_script.R\") %&gt;% \n  st_make(inspect = TRUE) %&gt;% \n  get_stable_data() \n\nx$notes\n\n[1] \"Source code: my\\\\_script.R\"",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Sanitize</span>"
    ]
  },
  {
    "objectID": "sanitize.html#column-names",
    "href": "sanitize.html#column-names",
    "title": "8  Sanitize",
    "section": "8.3 Column names",
    "text": "8.3 Column names\n\nout &lt;- \n  tibble(a_1 = 5) %&gt;% \n  stable(inspect = TRUE) %&gt;% \n  get_stable_data()\n\nout$cols_tex\n\n[1] \"a\\\\_1 \\\\\\\\\"",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Sanitize</span>"
    ]
  },
  {
    "objectID": "sanitize.html#main-table-contents",
    "href": "sanitize.html#main-table-contents",
    "title": "8  Sanitize",
    "section": "8.4 Main table contents",
    "text": "8.4 Main table contents\n\nout &lt;- \n  tibble(a = \"5_2\") %&gt;% \n  stable(inspect = TRUE) %&gt;% \n  get_stable_data()\n\nout$tab\n\n[1] \"5\\\\_2 \\\\\\\\\"",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Sanitize</span>"
    ]
  },
  {
    "objectID": "sanitize.html#span-titles",
    "href": "sanitize.html#span-titles",
    "title": "8  Sanitize",
    "section": "8.5 Span titles",
    "text": "8.5 Span titles\n\nout &lt;- \n  ptdata() %&gt;% \n  stable(\n    inspect = TRUE, \n    span = colgroup(\"foo_this\", WT:SCR)\n  ) %&gt;% get_stable_data()\n\nout$span_data$tex\n\n[1] \"\\\\multicolumn{4}{c}{} & \\\\multicolumn{5}{c}{foo\\\\_this} \\\\\\\\\"\n[2] \"\\\\cmidrule(lr){5-9}\"",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Sanitize</span>"
    ]
  },
  {
    "objectID": "sanitize.html#panel-names",
    "href": "sanitize.html#panel-names",
    "title": "8  Sanitize",
    "section": "8.6 Panel names",
    "text": "8.6 Panel names\n\ndata &lt;- tibble(\n  a = c(\"a_1\", \"a_1\", \"a_1\", \"a_2\", \"a_2\"), \n  b = letters[1:5]\n)\n\nout &lt;- stable(data, panel = \"a\") \nout[grepl(\"multicolumn\", out)]\n\n[1] \"\\\\multicolumn{1}{l}{\\\\textbf{a\\\\_1}}\\\\\\\\%--pmtables-insert-panel\"        \n[2] \"\\\\hline \\\\multicolumn{1}{l}{\\\\textbf{a\\\\_2}}\\\\\\\\%--pmtables-insert-panel\"",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Sanitize</span>"
    ]
  },
  {
    "objectID": "sanitize.html#cols_extra-input",
    "href": "sanitize.html#cols_extra-input",
    "title": "8  Sanitize",
    "section": "8.7 cols_extra input",
    "text": "8.7 cols_extra input\n\nx &lt;- letters[1:5]\ndata &lt;- tibble(a = x, b = x, c = x)\nxtra &lt;- tibble(a = \"foo%\", b = \"$\\\\mu$g\", c = \"1234 \\\\% %\")\nout &lt;- stable(data, cols_extra = xtra)\nout[grepl(\"%\", out, fixed = TRUE)]\n\n[1] \"foo\\\\% & $\\\\mu$g & 1234 \\\\% % \\\\\\\\\"",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Sanitize</span>"
    ]
  },
  {
    "objectID": "glossary.html",
    "href": "glossary.html",
    "title": "9  Glossary",
    "section": "",
    "text": "9.1 Create a glossary object\nInformation from a glossary is stored in a glossary object. The object is a list that contains glossary entries. The glossary object may be created either by reading a glossary file or through a constructor function in R.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Glossary</span>"
    ]
  },
  {
    "objectID": "glossary.html#create-a-glossary-object",
    "href": "glossary.html#create-a-glossary-object",
    "title": "9  Glossary",
    "section": "",
    "text": "9.1.1 Read in a glossary file - TeX\nGlossary files can be formatted as a collection of acronyms as you would normally have in a glossary.tex file. Something like this:\n\n\\newacronym{AIC}{AIC}{Akaike information criterion}\n\\newacronym{ALAG}{ALAG}{oral absorption lag time}\n\\newacronym{ALB}{ALB}{albumin}\n\\newacronym{ALT}{ALT}{alanine aminotransferase}\n\nAcronyms in TeX glossary files have 3 parts:\n\na label\nan abbreviation\na definition\n\nSo the general format for an acronym is\n\n\\newacronym{label}{abbreviation}{definition}\n\nIn this example,\n\n\\newacronym[sort=CLF]{CLF}{CL/F}{apparent clearance}\n\n\nCLF is the label\nCL/F is the abbreviation\napparent clearance is the definition\n\nWe read in this glossary file with read_glossary()\n\nglob &lt;- read_glossary(\"glossary.tex\")\n\nhead(glob)\n\n. AAG  : alpha-1-acid glycoprotein\n. AIC  : Akaike information criterion\n. ALAG : oral absorption lag time\n. ALB  : albumin\n. ALT  : alanine aminotransferase\n. AST  : aspartate aminotransferase\n\n\nWhen printing the object, you get the label and the abbreviation. To see the full entry, use $ to extract an entry\n\nglob$Cmax\n\n. maximum concentration in the dosing interval (Cmax)\n\n\nHere, we get the definition and the abbreviation printed to the console.\n\n\n9.1.2 Read in a glossary file - Yaml\nUsers can also code their own glossary files in yaml format.\n\nCLF: \n  abb: CL/F\n  def: apparent clearance after oral dosing\nV2F:\n  abb: V2/F\n  def: apparent central volume of distribution\nQF:\n  abb: Q/F\n  def: apparent intercompartmental clearance\nV3F:\n  abb: V3/F\n  def: apparent peripheral volume of distribution\n\nFor this format,\n\nPut the label in the outer level (e.g., CLF or V2F)\nPut the abbreviation under abb\nPut the definition under def\n\nWe can read the glossary file in yaml format again with read_glossary()\n\nyam &lt;- read_glossary(\"glossary.yaml\")\n\nyam\n\n. CLF : apparent clearance after oral dosing\n. V2F : apparent central volume of distribution\n. QF  : apparent intercompartmental clearance\n. V3F : apparent peripheral volume of distributi...\n\n\n\n\n9.1.3 Create with R constructor\nUse the as_glossary() function to create a glossary object in your R session\n\nglo &lt;- as_glossary(a = \"apple\", b = \"banana\", g = \"grape\")\n\nglo\n\n. a : apple\n. b : banana\n. g : grape\n\n\nAlternatively, you can coerce a list\n\nl &lt;- list(a = \"apple\", b = \"banana\", g = \"grape\")\n\nglo &lt;- as_glossary(l)\n\nIn this object, the label and the abbreviation are assumed to be the same.\n\nglo$g\n\n. grape (g)\n\n\nTo update the abbreviation,\n\nglo &lt;- update_abbrev(glo, g = \"gr\")\n\nglo$g\n\n. grape (gr)",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Glossary</span>"
    ]
  },
  {
    "objectID": "glossary.html#create-table-notes",
    "href": "glossary.html#create-table-notes",
    "title": "9  Glossary",
    "section": "9.2 Create table notes",
    "text": "9.2 Create table notes\nOnce the glossary object is created, you can form table notes using the glossary_notes() function.\nPass in the glossary object and the unquoted names you want to select out of the glossary\n\nglossary_notes(glob, WT, ALB) \n\n. [1] \"WT: weight; ALB: albumin\"\n\n\nThis generates a ;-separated string with abbreviation: definition format for all the entries you selected. This can be added to a table as notes:\n\nnotes &lt;- glossary_notes(glob, WT, ALB, SCR)\n\nst_new(stdata()[1:3,]) %&gt;% \n  st_notes(notes) %&gt;% \n  stable() %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\n\n9.2.1 Inline\nNotes can also be attached to a table inline with st_notes_glo()\n\nst_new(stdata()[1:3,]) %&gt;% \n  st_notes_glo(glob, WT, CRCL, ALB, SCR) %&gt;% \n  stable() %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\nNotice in this example that the notes are longer than the longest line in the table and the formatting looks off. In this case, use the width argument to detach the notes into a minipage arrangement\n\nst_new(stdata()[1:3,]) %&gt;% \n  st_notes_glo(glob, WT, CRCL, ALB, SCR, width = 0.9) %&gt;% \n  stable() %&gt;% \n  st_as_image()",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Glossary</span>"
    ]
  },
  {
    "objectID": "glossary.html#work-with-glossary-objects",
    "href": "glossary.html#work-with-glossary-objects",
    "title": "9  Glossary",
    "section": "9.3 Work with glossary objects",
    "text": "9.3 Work with glossary objects\n\n9.3.1 Update the abbreviation\n\nglob$hl\n\n. elimination half-life (\\ensuremath{t_{1/2}})\n\nglob &lt;- update_abbrev(glob, hl = \"t1/2\")\n\nglob$hl\n\n. elimination half-life (t1/2)\n\n\n\n\n9.3.2 Update the definition\nThere is no api to update the definition. This change should be made in the glossary file.\n\n\n9.3.3 Select certain items in a glossary object\n\nglob2 &lt;- select_glossary(glob, AIC, BIC)\n\nglob2\n\n. AIC : Akaike information criterion\n. BIC : Bayesian information criterion\n\n\n\n\n9.3.4 Combine two glossary objects\nUse the c function.\n\nglob3 &lt;- c(glob2, glo)\n\nglob3\n\n. AIC : Akaike information criterion\n. BIC : Bayesian information criterion\n. a   : apple\n. b   : banana\n. g   : grape\n\n\nThe labels in the objects you are combining must be unique. You will get an error if you try combining two objects which contain the same label\n\nx &lt;- glo\ny &lt;- as_glossary(m = \"mango\", b = \"blueberry\")\ntry(c(x,y))\n\n. Error in c.glossary(x, y) : Arguments cannot share any names.\n\n\nIn this case you can drop the duplicate name from one of the objects\n\nintersect(names(x), names(y))\n\n. [1] \"b\"\n\nz &lt;- select_glossary(glo, -b)\n\nz\n\n. a : apple\n. g : grape\n\nc(z, y)\n\n. a : apple\n. g : grape\n. m : mango\n. b : blueberry\n\n\n\n\n9.3.5 Get the glossary as a plain R list\n\nas.list(glob)[1]\n\n. $AAG\n. $AAG$abbreviation\n. [1] \"AAG\"\n. \n. $AAG$definition\n. [1] \"alpha-1-acid glycoprotein\"\n\n\n\n\n9.3.6 Get the glossary object as a data frame\n\nas.data.frame(glo)\n\n.   label definition abbreviation\n. 1     a      apple            a\n. 2     b     banana            b\n. 3     g      grape           gr\n\n\n\n\n9.3.7 View the glossary object\nYou’ll have to coerce to data frame first\n\nView(as.data.frame(glo))\n\n\n\n9.3.8 Extract one glossary entry\n\nglo$a\n\n. apple (a)\n\n\nor\n\nglo[[\"a\"]]\n\n. apple (a)\n\n\n\n\n9.3.9 Extract multiple glossary entries\n\nselect_glossary(glo, a, g)\n\n. a : apple\n. g : grape\n\n\nor\n\nglo[c(\"b\", \"g\")]\n\n. b : banana\n. g : grape\n\n\n\n\n9.3.10 Extract the abbreviations\n\npurrr::map(glob, \"abbreviation\")[1:2]\n\n. $AAG\n. [1] \"AAG\"\n. \n. $AIC\n. [1] \"AIC\"\n\n\n\n\n9.3.11 Extract the definitions\n\npurrr::map(glob, \"definition\")[1:2]\n\n. $AAG\n. [1] \"alpha-1-acid glycoprotein\"\n. \n. $AIC\n. [1] \"Akaike information criterion\"",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Glossary</span>"
    ]
  },
  {
    "objectID": "pmtable.html",
    "href": "pmtable.html",
    "title": "10  pmtable",
    "section": "",
    "text": "10.1 Principles\nThese functions expect that the user passes in all data that is to be summarized and nothing more. We will not filter your data.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>pmtable</span>"
    ]
  },
  {
    "objectID": "pmtable.html#rename-cols",
    "href": "pmtable.html#rename-cols",
    "title": "10  pmtable",
    "section": "10.2 Rename cols",
    "text": "10.2 Rename cols\nWhen you select columns to summarize, you can generally pass in alternate (nicer) names that you want to show up in the table. For example, if I have a column called WT in the data frame and I want it to show up as Weight this can be accomplished during the call\n\npt_cont_wide(data, cols = c(Weight = \"WT\")) %&gt;% \n  stable(notes = NULL) %&gt;% \n  st_as_image()\n\n\n\n\n\n\n\n\nAlternatively, you can use the table argument to enter rename info. Note that table is a list that should have names that match up with columns in the data frame and values that are the new names\n\ntab &lt;- list(SEXf = \"Sex\", ASIANf = \"Race group\")\n\npt_cat_wide(data, cols = \"SEXf,ASIANf\", table = tab) %&gt;% \n  stable() %&gt;% \n  st_as_image()",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>pmtable</span>"
    ]
  },
  {
    "objectID": "pmtable.html#data-inventory-tables",
    "href": "pmtable.html#data-inventory-tables",
    "title": "10  pmtable",
    "section": "10.3 Data inventory tables",
    "text": "10.3 Data inventory tables\n\nCount number of\nindividuals\nobservations\nBQL observations\nmissing values\nCalculate the percent of observations or BQL in different sub groups\n\n\n10.3.1 Stacked by endpoint\n\nThe stacked plot creates multiple independent tables to summarize different endpoints; there is no single overall summary for the table because we are summarizing different endpoints\n\n\nout &lt;- pt_data_inventory(\n  data_all,\n  by = c(Study = \"STUDYf\"),\n  panel = as.panel(\"SEQf\", prefix = \"Endpoint: \"),\n  stacked = TRUE\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.3.2 Paneled\n\nJust summarize a single endpoint\n\n\nout &lt;- pt_data_inventory(\n  data_pk,\n  by = c(Study = \"STUDYf\"),\n  panel = \"ASIANf\"\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.3.3 Grouped (by study)\n\nout &lt;- pt_data_inventory(\n  data_pk,\n  by = c(Study = \"STUDYf\")\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.3.4 BQL / BLQ\nBeginning with version 0.4.1, pmtables can accommodate either BQL or BLQ as the name of the column indicating that observations were below the limit of quantitation. Table notes and output column headers will be adjusted based on the input.\nFor example\n\ndata_ql &lt;- pmt_obs\ndata_lq &lt;- rename(pmt_obs, BLQ = BQL) \n\n\npt_data_inventory(data_ql, by = \"STUDYf\") %&gt;% \n  stable() %&gt;%\n  st_as_image()\n\n\n\n\n\n\n\n\n\npt_data_inventory(data_lq, by = \"STUDYf\") %&gt;% \n  stable() %&gt;%\n  st_as_image()",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>pmtable</span>"
    ]
  },
  {
    "objectID": "pmtable.html#wide-categorical-table",
    "href": "pmtable.html#wide-categorical-table",
    "title": "10  pmtable",
    "section": "10.4 Wide categorical table",
    "text": "10.4 Wide categorical table\n\nSummary of categorical data in wide format\nThe summary is number (percent within group)\nWide refers to the fact that the covariates go across the table\n\n\n10.4.0.1 Ungrouped\n\nout &lt;- pt_cat_wide(\n  data = data,\n  cols = vars(Formulation = FORMf, Sex = SEXf, \"Race group\" = ASIANf)\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.4.1 Paneled (limited utility, IMO)\n\nProvided here for completeness\n\n\nout &lt;- pt_cat_wide(\n  data = data,\n  cols = vars(Formulation = FORMf, Sex = SEXf, \"Race group\" = ASIANf),\n  panel = as.panel(\"STUDYf\", prefix = \"Study: \")\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.4.2 Grouped (by male / female)\n\nout &lt;- pt_cat_wide(\n  data = data,\n  by = c(Sex = \"SEXf\"),\n  cols = vars(Formulation = FORMf, \"Race group\" = ASIANf)\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.4.3 Paneled and grouped\n\nout &lt;- pt_cat_wide(\n  data = data,\n  cols = vars(Formulation = FORMf, Sex = SEXf, \"Race group\" = ASIANf),\n  panel = as.panel(\"STUDYf\", prefix = \"Study: \"),\n  by = c(\"RF Group\" = \"RFf\")\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.4.4 No summary\n\nout &lt;- pt_cat_wide(\n  data = data,\n  summarize = \"none\",\n  cols = vars(Formulation = FORMf, Sex = SEXf, \"Race group\" = ASIANf),\n  panel = as.panel(\"STUDYf\", prefix = \"Study: \"),\n  by = c(\"RF Group\" = \"RFf\")\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>pmtable</span>"
    ]
  },
  {
    "objectID": "pmtable.html#long-categorical-table",
    "href": "pmtable.html#long-categorical-table",
    "title": "10  pmtable",
    "section": "10.5 Long categorical table",
    "text": "10.5 Long categorical table\n\nCategorical table in long format\nLong indicates that the covariates go down the table\n\n\n10.5.1 Ungrouped\n\nout &lt;- pt_cat_long(\n  data = data,\n  cols = vars(Study = STUDYf, Sex = SEXf, \"Race group\" = ASIANf, \"Child-Pugh\" = CPf)\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.5.2 Grouped (by formulation)\n\nout &lt;- pt_cat_long(\n  data = data,\n  cols = vars(Study = STUDYf, Sex = SEXf, \"Race group\" = ASIANf, \"Child-Pugh\" = CPf),\n  span = c(Formulation = \"FORMf\")\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.5.3 Summary on bottom and right\n\nout &lt;- pt_cat_long(\n  data = data,\n  summarize = \"both\",\n  cols = vars(Formulation = FORMf, Sex = SEXf, \"Race group\" = ASIANf),\n  span = vars(Study = STUDYf)\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.5.4 No summary\n\nout &lt;- pt_cat_long(\n  data = data,\n  summarize = \"none\",\n  cols = vars(Formulation = FORMf, Sex = SEXf, \"Race group\" = ASIANf),\n  span = vars(Study = STUDYf)\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>pmtable</span>"
    ]
  },
  {
    "objectID": "pmtable.html#wide-continuous-table",
    "href": "pmtable.html#wide-continuous-table",
    "title": "10  pmtable",
    "section": "10.6 Wide continuous table",
    "text": "10.6 Wide continuous table\n\nContinuous table in wide format\nWide means that the covariates go across the table\n\n\n10.6.1 Ungrouped\n\nout &lt;- pt_cont_wide(\n  data = data,\n  cols = \"WT,SCR,AGE,ALB,HT\",\n  units = units\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.6.2 Paneled\n\nout &lt;- pt_cont_wide(\n  data = data,\n  cols = \"WT,SCR,AGE,ALB,HT\",\n  panel = c(Study = \"STUDYf\"),\n  units = units\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.6.3 Grouped (by study)\n\nout &lt;- pt_cont_wide(\n  data = data,\n  cols = \"WT,SCR,AGE,ALB\",\n  by = c(Study = \"STUDYf\"),\n  units = units\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.6.4 Paneled and grouped\n\nout &lt;- pt_cont_wide(\n  data = data,\n  cols = \"WT,SCR,AGE,ALB\",\n  by = c(Study = \"STUDYf\"),\n  panel = c(Formulation = \"FORMf\"),\n  units = units\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>pmtable</span>"
    ]
  },
  {
    "objectID": "pmtable.html#long-continuous-table",
    "href": "pmtable.html#long-continuous-table",
    "title": "10  pmtable",
    "section": "10.7 Long continuous table",
    "text": "10.7 Long continuous table\n\nContinuous summary table in long format\nLong indicates that covariates go down the table\n\n\n10.7.1 Ungrouped\n\nout &lt;- pt_cont_long(\n  data = data,\n  cols = \"WT,SCR,AGE\",\n  units = units\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.7.2 Paneled\n\nout &lt;- pt_cont_long(\n  data = data,\n  cols = \"WT,SCR,AGE\",\n  panel = vars(Study = STUDYf),\n  units = units\n)\n\nstable(\n  out, \n  r_file = \"test.R\", \n  output_file = \"test.tex\"\n) %&gt;% st_as_image()",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>pmtable</span>"
    ]
  },
  {
    "objectID": "pmtable.html#demographics-table",
    "href": "pmtable.html#demographics-table",
    "title": "10  pmtable",
    "section": "10.8 Demographics table",
    "text": "10.8 Demographics table\nA demographics table summarizes both continuous and discrete data in a single table.\n\nBoth continuous columns (cols_cont) and discrete (cols_cat) are required\nYou can specify a span column (the table is pretty skinny without that)\nYou can opt out of the paneling too with paneled argument (the also makes the table wider\nAn All data summary is provided on the left (opt out with summarize_all)\n\n\n10.8.1 With span\n\npt_demographics(\n  pmt_first, \n  cols_cont = \"WT, CRCL\", \n  cols_cat = \"SEXf, CPf\", \n  span = c(Study = \"STUDYf\")\n) %&gt;% stable() %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.8.2 No span\n\nThis table is skinny\n\n\nmini &lt;- noteconf(type = \"minipage\", width = 0.5)\n\npt_demographics(\n  pmt_first, \n  cols_cont = \"WT, CRCL, AGE\", \n  cols_cat = \"SEXf, CPf\"\n) %&gt;% stable(note_config = mini) %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.8.3 No span, not paneled\n\nOpting out of the paneling also makes it wider\n\n\npt_demographics(\n  pmt_first, \n  cols_cont = \"WT, CRCL, AGE\", \n  cols_cat = \"SEXf, CPf\", \n  paneled = FALSE, \n  table = list(\n    WT   = \"Weight (kg)\", \n    CRCL = \"CLCR (ml/min)\", \n    AGE  = \"Age (years)\", \n    SEXf = \"Sex\", \n    CPf  = \"Child-Pugh\"\n  )\n) %&gt;% stable() %&gt;% st_as_image()\n\n\n\n\n\n\n\n\n\n\n10.8.4 No summary\n\npt_demographics(\n  pmt_first, \n  cols_cont = \"WT, CRCL, AGE\", \n  cols_cat = \"SEXf, CPf\", \n  span = c(Study = \"STUDYf\"),\n  summarize_all = FALSE\n) %&gt;% stable() %&gt;% st_as_image()",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>pmtable</span>"
    ]
  },
  {
    "objectID": "pmtable.html#customized-summary-functions",
    "href": "pmtable.html#customized-summary-functions",
    "title": "10  pmtable",
    "section": "10.9 Customized summary functions",
    "text": "10.9 Customized summary functions\npmtables will summarize continuous data using a built-in function, producing standard summaries (e.g. mean, median, etc). Users can pass a function to replace this default, allowing totally customized summaries.\nCustom summary functions are not currently allowed for categorical data.\n\n10.9.1 Continuous long table\nYou can pass a custom summary function via fun. This function should have a first argument called value and should be able to absorb extra arguments via .... The function should return a data.frame, with a single row and summaries going across in the columns.\nFor example, we can have pt_cont_long() return the geometric mean and variance by passing the following function\n\ncont_long_custom &lt;- function(value, ...) {\n  value &lt;- na.omit(value)\n  ans &lt;- data.frame(\n    GeoMean = exp(mean(log(value))), \n    Variance = var(value)\n  )\n  mutate(ans, across(everything(), sig))\n}\n\nTest the function by passing some test data\n\ncont_long_custom(c(1,2,3,4,5))\n\n  GeoMean Variance\n1    2.61     2.50\n\n\nThen, pass this as fun\n\npt_cont_long(\n  data = pmt_first, \n  cols = c(\"WT\", \"ALB\", \"AGE\"), \n  fun = cont_long_custom\n)$data\n\n# A tibble: 3 × 3\n  Variable GeoMean Variance\n  &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   \n1 WT       69.5    165     \n2 ALB      4.11    0.629   \n3 AGE      32.5    78.0    \n\n\nSee pmtables:::cont_long_fun (the default) for an example.\n\n\n10.9.2 Continuous wide table\nYou can pass a custom summary function via fun. This function should have a first argument called value and should be able to absorb extra arguments via .... The continuous, wide table must return a data.frame with a single row and a single column named summary\n\ncont_wide_custom &lt;- function(value, ...) {\n  value &lt;- na.omit(value)\n  geo_mean &lt;- sig(exp(mean(log(value))))\n  variance &lt;- sig(var(value))\n  n &lt;- length(value)\n  ans &lt;- paste0(geo_mean, \" [\", variance, \"] (\", n, \")\")\n  data.frame(summary = ans)\n}\n\nYou can test the function by passing some test data\n\ncont_wide_custom(c(1, 3, 5))\n\n          summary\n1 2.47 [4.00] (3)\n\n\nThen, pass this as fun\n\npt_cont_wide(\n  data = pmt_first, \n  cols = c(\"WT\", \"ALB\", \"AGE\"), \n  fun = cont_wide_custom\n)$data\n\n# A tibble: 1 × 3\n  WT               ALB                AGE              \n  &lt;chr&gt;            &lt;chr&gt;              &lt;chr&gt;            \n1 69.5 [165] (157) 4.11 [0.629] (156) 32.5 [78.0] (160)\n\n\nSee pmtables:::cont_wide_fun (the default) for an example.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>pmtable</span>"
    ]
  }
]